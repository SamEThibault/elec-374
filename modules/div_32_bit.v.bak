module div_32_bit(
    output reg[31:0] quotient,
    output reg[31:0] remainder,
    input wire[31:0] dividend,
    input wire[31:0] divisor
);

integer i;
wire [31:0] Q = dividend;
wire [31:0] M = divisor;
wire [31:0] A = 32'd0;
wire [31:0] negDivisor;
wire [31:0] subOutput;
negate_32_bit negRes(negDivisor, Q);

always@(dividend & divisor)
begin
    for(i=0; i<32; i= i+1)begin
        A={A[30:0], Q[31]} //Shift left
        subOutput = A & negDivisor; //Subtract

        if(subOutput[31] == 1'd1)begin
            Q = {Q[31:1], 0'b0}; //Set q0 && restore
        end
        else begin
            Q = {Q[31:1], 0'b1};//Set q0
            A = 32'd0; //Don't restore
        end
    end

    quotient = Q;
    remainder = A;
end
endmodule